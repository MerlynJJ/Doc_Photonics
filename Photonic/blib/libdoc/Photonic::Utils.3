.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Photonic::Utils 3"
.TH Photonic::Utils 3 "2019-03-26" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Photonic::Utils
.SH "VERSION"
.IX Header "VERSION"
version 0.011
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Photonic::Utils qw(cmatmult);
\&    $c=cmatmult($a, $b);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Utility functions that may be useful.
.SH "Exportable Functions"
.IX Header "Exportable Functions"
.IP "\(bu" 4
\&\f(CW$r\fR=linearCombine($c, \f(CW$s\fR)
.Sp
Complex linear combination of states. \f(CW$c\fR is an arrayref of 'complex' pdl
scalars and \f(CW$s\fR is an arrayref of 'complex' states ('complex'
multidimensional pdl).
.IP "\(bu" 4
\&\f(CW$p\fR=HProd($a, \f(CW$b\fR, \f(CW$skip\fR)
.Sp
Hermitean product <a|b> of two 2x.... 'complex' multidimensional
pdls \f(CW$a\fR and \f(CW$b\fR. If \f(CW$skip\fR is present, preserve the first 1+$skip
_dimensions (the first dimension is RorI) before adding up.
.IP "\(bu" 4
\&\f(CW$p\fR=MHProd($a, \f(CW$b\fR, \f(CW$m\fR, \f(CW$skip\fR)
.Sp
Hermitean product <a|m|b> of two 2x.... 'complex' multidimensional
pdls \f(CW$a\fR and \f(CW$b\fR representing vector fields using metric \f(CW$m\fR. If \f(CW$skip\fR is
present, preserve the first 1+$skip dimensions (the first dimension
is RorI) before adding up. (Might not be functional yet, or might be wrong)
.IP "\(bu" 4
\&\f(CW$p\fR=EProd($a, \f(CW$b\fR, \f(CW$skip\fR)
.Sp
Euclidean product <a|b> of two 2x.... 'complex' multidimensional
pdls \f(CW$a\fR and \f(CW$b\fR in reciprocal space. If \f(CW$skip\fR is present, preserve the
first 1+$skip dimensions (the first dimension is RorI) before adding up.
.IP "\(bu" 4
\&\f(CW$p\fR=SProd($a, \f(CW$b\fR, \f(CW$skip\fR)
.Sp
Spinor product <a|b> of two 2x.... 'complex' multidimensional
pdls \f(CW$a\fR and \f(CW$b\fR in reciprocal space. If \f(CW$skip\fR is present, preserve the
first 2+$skip dimensions (the first dimension is RorI and the second
the spinor dimension) before adding up.
.IP "\(bu" 4
\&\f(CW$psiG\fR = RtoG($psiR, \f(CW$ndims\fR, \f(CW$skip\fR)
.Sp
Transforms a \f(CW$ndims\fR\-dimensional 'complex' scalar, vector or tensor
field \f(CW$psiR\fR that is a function of position within the unit cell to a
complex field \f(CW$psiG\fR that is a function of the reciprocal vectors. The
first dimension must be 2, as the values are complex. The next \f(CW$skip\fR
dimensions are skiped (0 for a scalar, 1 for a vector, 2 for a
2\-tensor field). The Fourier transform is performed over the
following \f(CW$ndims\fR dimensions.
.IP "\(bu" 4
\&\f(CW$psiR\fR = GtoR($psiG, \f(CW$ndims\fR, \f(CW$skip\fR)
.Sp
The opposite transformation to RtoG. Transform a 'complex' scalara,
vector or tensorial field from reciprocal to real space.
.IP "\(bu" 4
\&\f(CW$b\fR=tile($a, \f(CW$nx\fR, \f(CW$ny\fR,...)
.Sp
returns \f(CW$a\fR repeated periodically \f(CW$nx\fR times along the x direction, \f(CW$ny\fR
along the y direction, etc. Useful for making plots.
.IP "\(bu" 4
\&\f(CW$l\fR=vectors2Dlist($f, \f(CW$s\fR, \f(CW$d\fR)
.Sp
Returns a 2D vector field ready for gnuplotting from a vector field \f(CW$f\fR
scaling the result by \f(CW$s\fR and decimating the field by \f(CW$d\fR. The vectors
are centered on the decimated lattice points.
.IP "\(bu" 4
\&\f(CW$c\fR=cmatmult($a, \f(CW$b\fR)
.Sp
Returns the matrix product of the complex matrices \f(CW$a\fR times \f(CW$b\fR, with
signatures a(2,j,i), b(2,k,j), c(2,k,i). The first index is 2,
corresponding to the real and imaginary parts, j denotes columns of a,
rows of b, i denotes rows of a and of the result c, k denotes columns
of b and the result c. Recall that in pdl the first (row) index is
faster. May thread over extra dimensions.
.SH "NOTE"
.IX Header "NOTE"
Uses Inline::Pdlpp, so the first time it is run it compiles itself,
and would take a little longer than the following. To recompile,
remove the directory _Inline/ before running.
.PP
\&\fBYou must make sure that the relative location of the libutils.so
library is correct.\fR See \f(CW$Bin\fR below.
